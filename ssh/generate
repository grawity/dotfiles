#!/usr/bin/env bash
# Generator for ~/.ssh/config

set -e

PATH="$HOME/code/bin:$PATH"

. lib.bash || exit
. libfilterfile.bash || exit

progname='ssh/generate'

ssh_version() {
	echo "${SSHPRODUCT:=$(ssh -V 2>&1)}"
}

# match_eval helper functions

Host() {
	: ${FQDN:=$(fqdn)}
	match_hostname "$1"
}

Product() {
	ssh_version | grep -qs "^${1}_"
}

OpenSSH() {
	Product OpenSSH
}

Version() {
	local minversion=$1
	local curversion=${SSHVERSION:=$(ssh_version |
				sed -rn 's/^\w+_([^ ,]+),? .*/\1/p')}
	minversion=${minversion%p*}.
	curversion=${curversion%p*}.
	local minorig=$minversion curorig=$curversion
	local minhead curhead loop=0

	while [[ $minversion && $curversion ]]; do
		debug "comparing '$minversion' vs '$curversion'"
		minhead=${minversion%%.*}
		curhead=${curversion%%.*}
		minversion=${minversion#*.}
		curversion=${curversion#*.}
		if (( minhead > curhead )); then
			debug "compare '$minhead' > '$curhead', too old"
			return 1
		elif (( minhead < curhead )); then
			debug "compare '$minhead' < '$curhead', accepted"
			return 0
		else
			debug "compare '$minhead' = '$curhead', continuing"
		fi
		if (( ++loop > 50 )); then
			err "BUG: infinite loop while comparing '$minorig' vs '$curorig'"
			return 1
		fi
	done
	debug "all components identical, accepted"
	return 0
}

SystemChassis() {
	local regex="^($1)$"
	local chassis
	if have busctl; then
		chassis=$(busctl get-property org.freedesktop.hostname1 \
			/org/freedesktop/hostname1 org.freedesktop.hostname1 \
			Chassis 2>/dev/null | sed 's/^s "//; s/"$//')
	fi
	chassis=${chassis:-unknown}
	debug "comparing /$regex/ against '$chassis'"
	[[ $chassis =~ $regex ]]
}

# generator

generate() {
	echo "# GENERATED FILE, DO NOT BOTHER EDITING"
	echo "# Updated on $(date) by $USER@$HOSTNAME"
	cat "${input[@]}" 2>/dev/null | filter_file match_eval
}

input=( ~/lib/dotfiles/ssh/config
	~/lib/dotfiles/ssh/config-$HOSTNAME )

output=".generated-config-$HOSTNAME"

if [[ $1 == "--test" ]]; then
	generate
else
	if [[ ! -d ~/.ssh ]]; then
		debug "ok, ~/.ssh doesn't exist yet - creating"
		mkdir -p -m 0700 ~/.ssh
		true
	elif [[ ! -e ~/.ssh/config ]]; then
		debug "ok, config doesn't exist yet - creating"
		true
	elif [[ ~/.ssh/config -ef ~/.ssh/$output ]]; then
		debug "ok, generated config found - updating"
		true
	elif [[ -L ~/.ssh/config ]]; then
		if [[ $(readlink ~/.ssh/config) == .generated-config-* ]]; then
			debug "ok, generated config found - updating"
			true
		else
			debug "symlinked config found - exiting"
			exit 0
		fi
	else
		die "refusing to overwrite local ~/.ssh/config"
	fi
	generate > ~/.ssh/$output
	ln -sf $output ~/.ssh/config
fi
