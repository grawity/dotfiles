# vim: ft=sh

[[ $- != *i* ]] && return

dir=${BASH_SOURCE[0]%/*}
. $dir/bashrc-rain
unset dir

## Smartcard hackery

fxdb() { (nssdb="$HOME/.mozilla/firefox/r0fd79nc.default"; "$@"); }
thdb() { (nssdb="$HOME/.thunderbird/7pkkqarz.default"; "$@"); }
smdb() { (nssdb="$HOME/.mozilla/seamonkey/x7zj66ef.default"; "$@"); }

## Network hackery

add-vlan() {
	local dev=$1 addr=$2
	sudo: ip link add "$dev" link "${dev%.*}" type vlan id "${dev##*.}"
	sudo: ip link set "$dev" up
	if [[ $addr ]]; then
		[[ $addr == */* ]] || addr+="/16"
		sudo: ip addr add "$addr" dev "$dev"
	fi
}

run-dhclient() {
	sudo: dhclient -4 -d "${1:-eth0}" "${@:2}"
}

run-dhcpcd() {
	sudo: dhcpcd \
		--ipv4only \
		--noarp \
		--nodelay \
		--reboot 0 \
		--timeout 0 \
		--nobackground \
		--nohook resolv.conf \
		--debug \
		"${1:-eth0}" "${@:2}"
}

ecap() {
	sudo: tcpdump -Unei "${dev:-eth0}" "${1:-not (port 5353)}"
}

earp() {
	ecap "arp or (udp port 67 or 68)"
}

ukip() {
	local arg dev=eth0
	for arg in "${@:-up}"; do
		case $arg in
		up)
			do:   nmcli dev set $dev managed no
			sudo: ip link set $dev up
			sudo: ip addr flush dev $dev
			#sudo: ip addr add 169.254.0.42/16 dev $dev scope link
			sudo: ip addr add 192.168.0.42/24 dev $dev
			sudo: ip addr add 192.168.1.42/24 dev $dev
			;;
		down)
			sudo: ip addr flush dev $dev
			do:   nmcli dev set $dev managed yes
			;;
		*)
			if [[ -e /sys/class/net/$arg ]]; then
				dev=$arg
			else
				echo "bad arg '$arg'" >&2
			fi
			;;
		esac
	done
}

uredboot() {
	do: telnet 192.168.1.20 9000
}

u2() {
	dot -Tx11 < ~/Dropbox/Work/Net/Ute2.gv
}
