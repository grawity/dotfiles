" ~/.vimrc - |vimrc| - Vim configuration

if has("nvim-0.9.0")
	" Neovim 0.9.0: already has EditorConfig support; suppress the plugin
	let g:loaded_EditorConfig = 1
endif

if v:version < 800
	" Vim 8.0 and Neovim already auto-load bundles from 'pack/*/start/',
	" so they don't need to use pathogen.
	execute pathogen#infect()
endif

set nocompatible

" Terminal features

if has("nvim")
	" Neovim uses DEC sequences to change text cursor style, but
	" there is no sequence to query the current style on startup
	" so Neovim cannot properly reset it back on exit.

	" Disable styling entirely (This must go before 'set title').
	set guicursor=

	" Or always reset it to a specific style.
	"au VimLeave,VimSuspend * set guicursor=a:foo
endif

set title
set titlelen=0
set titlestring=%t%(\ %m%)%(\ (%{hostname()}\ %{expand(\"%:p:~:h\")})%)%(\ %a%)

if &term =~ "^screen"
	" Deal with Screen's inability to recognize \e]; as \e]0;
	set t_ts=]2; t_fs=
endif

set mouse=a

if &term =~ "^xterm" && !has("nvim")
	" The default 'xterm' mode is limited to 223 columns, and Windows
	" Terminal oddly has a much lower 93-col limit for it.
	"
	" 'sgr' seems to be the explicitly recommended mode; it works in PuTTY
	" and Windows Terminal, and has no such limit.
	"
	" Vim tries to autodetect sgr-capable terminals, but WT does not (yet)
	" respond to \e[>c version query.
	"
	" Neovim always uses sgr and does not have ttymouse= option (although
	" used to accept it before 0.9.0).
	set ttymouse=sgr
endif

" Syntax highlighting

let perl_no_extended_vars=1
let python_no_builtin_highlight=1

filetype plugin on
filetype indent off

augroup filetypedetect
	" Override Arch's ftdetect/PKGBUILD.vim
	" (This must be done after pathogen but before 'syntax on'.)
	au! BufNewFile,BufRead PKGBUILD
augroup END

syntax on
syntax sync minlines=200

" Color scheme

if has("termguicolors")
	" Vim 8, Neovim: Use RGB colors if possible.
	" <https://gist.github.com/XVilka/8346728>
	if &term =~ "^putty"
		" PuTTY does not support : as separator yet
		let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
		let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
	endif

	" Terminals known to support RGB
	if $JUICESSH =~ "yes"
		set notermguicolors
	elseif &term =~ "^\\(tmux\\|putty\\|xterm\\)-256color\\|.*-direct$\\|^foot$"
		set termguicolors
	endif
	" Neovim on Windows (both Qt GUI and Windows Terminal native)
	if &term =~ "^\\(nvim\\|builtin_vtpcon\\)$"
		set termguicolors
	endif
endif

"let g:lucius_style="light"
"let g:lucius_style="dark"
let g:solarized_contrast="high"
let g:zenburn_disable_bold_CursorBars=1
let g:zenburn_high_Contrast=1
let g:zenburn_old_Visual=1
let g:zenburn_italic_Comment=1
let g:zenburn_subdued_LineNr=1

if has("gui_running")
	" configured in gvimrc
elseif $TERM == "linux"
	" Neovim: Work around &t_Co being frozen at 256 regardless of $TERM.
	" (Note: Must use $TERM instead of &term, as the latter is not yet
	" defined during init.vim parsing.)
	color elflord
elseif &t_Co >= 256
	" Modern terminals
	if hostname() == "frost"
		let light = "lucius"
	elseif hostname() == "fujitsu"
		let light = "lucius"
	else
		let light = "solarized"
	endif

	let dark = "zenburn"

	if $BRIGHT == "1" | exe "color" light | else | exe "color" dark | endif

	" On terminals that support bgcolor reporting, Neovim sets 'bg=light'
	" asynchronously. (Note: This is not triggered for 'bg=dark', likely
	" because that's already the default.)
	autocmd OptionSet background ++once
	\ if &bg ==# 'light' | exe "color" light | else | exe "color" dark | endif
else
	" Fallback for obsolete terminals
	silent! color slate
endif

if &t_Co > 16 && $TERM != "linux"
	"setl cursorline
	"au WinEnter *		setl cursorline
	"au WinLeave *		setl nocursorline
	"au FocusGained *	setl cursorline
	"au FocusLost *		setl nocursorline
endif

""" UI elements

" Show current line,column in status bar (Neovim 0.??: default on)
set ruler

" Show filename & ruler as a per-file status bar
if hostname() == "fujitsu"
	set laststatus=1	" Only in split windows
else
	set laststatus=2	" Always (Nvim default)
endif

set showmode			" Show '--INSERT--' in status
set showcmd			" Show command being typed in status

silent! set number		" Show line numbers
silent! set numberwidth=4

set linebreak			" Softwrap at word boundaries
set display+=lastline		" Show partial line if it doesn't fit
"set showbreak=â†µ\ 		" Prefix wrapped lines
set display+=uhex		" Show unprintable chars as <hex>
silent! set listchars=eol:Â¬,tab:â†’.,extends:Â»,precedes:Â«,trail:â€¢

set scrolloff=3			" Context lines when scrolling
set splitbelow splitright
set tabpagemax=20		" Increase max tab pages

set wildmenu			" Show menu when tab-completing
"set wildmode=list:longest

" Case-insensitive tab-completion. (Note: This unfortunately breaks completing
" across an autofs mount that's not yet mounted and visible, in both Vim and
" Neovim.)
"silent! set wildignorecase

set noerrorbells visualbell t_vb=	" turn off all bells

set shortmess+=I		" Do not show :intro message on startup
"set shortmess+=A		" Do not warn about existing swapfiles

""" File input/output

let g:netrw_http_cmd="curl -s -L"
let g:netrw_http_xcmd="-o"
let g:netrw_silent=1

set encoding=utf-8
set fileencodings=ucs-bom,utf-8,cp1257,latin1
set modeline

set backupcopy=yes		" fixes issues with vipw
set autoread

" When buffers become abandoned, hide them instead of unloading completely.
" (Enabled by default as of Neovim 0.6)
set hidden

if has("nvim")
	" Treat AFS/NFS paths as 'removable' and don't store them in shada
	set shada+=r/afs/,r/n/,r/net/
endif

if !has("nvim")
	" Move the .viminfo file out of $HOME
	set viminfo+=n~/.vim/_viminfo
endif

" Move swapfiles to a central location (instead of next to original)
if has("unix") && $USER != "root"
	if has("nvim")
		set backupdir-=.
		set undofile
	else
		" Use // to include full path in swapfile names
		set directory=~/.vim/_backup//
		set backupdir=~/.vim/_backup//
		silent! set undodir=~/.vim/_undo//
		silent! set undofile
	endif
endif

""" Text editing

set smarttab
" When autoindenting a new line, inherit tab/space usage from previous line
set copyindent
" When adjusting indent of a line, preserve tab/space usage
set preserveindent

set autoindent

" Auto-indent after '{'
set smartindent
"set cindent
set cinkeys=0{,0},0),:,!,o,O,e
" Don't smartindent after keywords like 'for', 'do' etc.
" (This retains smartindent after '{'.)
set cinwords=

" Note: To determine what re-enabled these options, use:
"       :verbose set sw? et? si? cin?

" When joining lines, don't add two spaces between sentences.
" (This is now disabled by default as of Neovim 0.6)
set nojoinspaces

" Allow backspacing over autoindents; across line breaks; and deleting text
" before the insert point. (Enabled by default in Neovim 0.5, probably, or
" even earlier)
set backspace=indent,eol,start

" t,c: auto-wrap text, comments according to textwidth
" r,o: insert comment leader after Return, o/O
" q: allow gq to format comments
" n: detect numbered lists
" j: remove comment leader when joining
set formatoptions=tcrqnj
" don't recognize S-lang comment leaders, X11 crazy stuff
set comments-=:%
set comments-=:XCOMM

" Don't highlight matching brackets by auto-moving the cursor
set noshowmatch

set incsearch		" Live highlight // searches
set ignorecase		" Assume //i by default
set smartcase		" Don't assume //i if upper-case was used
set gdefault		" Assume s///g by default
if has("nvim")
	" Disable live preview of s/// in Neovim 0.6+
	set inccommand=
endif

""" Keyboard and custom commands

" Alias accidental :W to :w
com! -complete=file -bang -nargs=? W :w<bang> <args>

nnoremap ; :
nnoremap K <nop>
nnoremap q :q

" Stop smartindent from auto-unindenting when # is input
" (should this be done via cinkeys instead?)
inoremap # X#

" Navigate visible lines, not physical lines, when soft-wrapped
nnoremap k gk
nnoremap j gj
nnoremap <Up> gk
nnoremap <Down> gj
inoremap <C-Up> <Esc>gka
inoremap <C-Down> <Esc>gja

" Paste without yanking old text
"vnoremap p "0p
"vnoremap P "0P

" Jump between parens using Tab
nnoremap <Tab> %
vnoremap <Tab> %

" In :terminal windows, allow using Esc to escape insert mode
if has("nvim") || has("terminal")
	tnoremap <Esc> <C-\><C-n>
	" other shortcuts:
	" Vim 8.1 - http://vimhelp.appspot.com/terminal.txt.html
endif

" List buffers
nnoremap <Leader>b :ls<CR>:b<Space>
" Remove search highlight
nnoremap <Leader>h :nohlsearch<CR>
" Rename word under cursor
nnoremap <Leader>rw :%s/\<<C-r><C-w>\>/
" Toggle spell checking
nnoremap <Leader>s :set spell!<CR>
" Sort CSS properties
nnoremap <Leader>S ?{<CR>jV/^\s*\}?$<CR>k:sort<CR>:noh<CR>
" Display NERDtree
nnoremap <Leader>f :NERDTreeToggle<CR>
" Display Tagbar
nnoremap <Leader>t :TagbarToggle<CR>
" Reselect pasted text
nnoremap <Leader>v `[V`]
" Rewrap current paragraph
nnoremap <Leader>w gq}
" Strip trailing whitespace
nnoremap <Leader>W :%s/\s\+$//<CR>:let @/=""<CR>
" Add a header underline
nnoremap <Leader><Leader>= yypVr=k
nnoremap <Leader><Leader>~ yypVr~k
nnoremap <Leader><Leader>- yypVr-k

" Define ':call JoinPara()' to join all space-separated paragraphs
func! JoinPara()
	:g/^\S/ .,/^$/-1 join
endfunc

" Fix application-numpad mode
if !has("nvim")
	" (Vim 8.1) with Num Lock off, Num5 is parsed as individual commands
	map! <Esc>OE <Nop>
endif

" Fix application-numpad mode in PuTTY
if !has("nvim") && $TERM =~ "^xterm"
"	set iminsert=1
"
	map <Esc>Ol +
	map <Esc>On .
	map <Esc>Op 0
	map <Esc>Oq 1
	map <Esc>Or 2
	map <Esc>Os 3
	map <Esc>Ot 4
	map <Esc>Ou 5
	map <Esc>Ov 6
	map <Esc>Ow 7
	map <Esc>Ox 8
	map <Esc>Oy 9
	map <Esc>OQ /
	map <Esc>OR *
	map <Esc>OS -
	map <Esc>Ol +
	map <Esc>On .

	map! <Esc>Op 0
	map! <Esc>Oq 1
	map! <Esc>Or 2
	map! <Esc>Os 3
	map! <Esc>Ot 4
	map! <Esc>Ou 5
	map! <Esc>Ov 6
	map! <Esc>Ow 7
	map! <Esc>Ox 8
	map! <Esc>Oy 9
	map! <Esc>OQ /
	map! <Esc>OR *
	map! <Esc>OS -
	map! <Esc>Ol +
	map! <Esc>On .

"	lmap <Esc>Ol +
"	lmap <Esc>On .
"	lmap <Esc>Op 0
"	lmap <Esc>Oq 1
"	lmap <Esc>Or 2
"	lmap <Esc>Os 3
"	lmap <Esc>Ot 4
"	lmap <Esc>Ou 5
"	lmap <Esc>Ov 6
"	lmap <Esc>Ow 7
"	lmap <Esc>Ox 8
"	lmap <Esc>Oy 9
"	lmap <Esc>OQ /
"	lmap <Esc>OR *
"	lmap <Esc>OS -
endif

" Don't use a timeout for key codes (expect the entire key code to be
" contained within a single `read()` result); enabled by defaults.vim
"
" 2022-07-26: This turns out to cause problems with Windows Terminal (or its
" interaction with OpenSSH), which sometimes splits the \e[201~ "End bracketed
" paste" sequence preventing Neovim from recognizing it correctly.
"set nottimeout

""" File-specific behavior

if has("autocmd")
	au BufNewFile,BufRead COMMIT_EDITMSG,git-rebase-todo
	\ setl nomodeline

	au BufNewFile,BufRead /etc/motd
	\ setl et

	au BufNewFile,BufRead authorized_keys,~/.ssh/authorized_keys*,known_hosts,id_*.pub
	\ setl ft=conf wrap nolinebreak

	au! BufNewFile */_posts/2*.html
	\ 0r %:h/_template.html

	if has("nvim")
		" Neovim 0.2.1: terminal buffers now have line numbers --
		" disable them again
		au! TermOpen * setl nonumber norelativenumber
	endif
endif

" Plugins

if has("nvim")
	" https://github.com/lewis6991/gitsigns.nvim
	if hostname() == "frost"
		lua require('gitsigns').setup()
	endif
endif

" Packer (todo)
" use "EdenEast/nightfox.nvim"
" use "nanozuki/tabby.nvim"
" use "talha-akram/noctis.nvim"
