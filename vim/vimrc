" ~/.vimrc - |vimrc| - Vim configuration

execute pathogen#infect()

set nocompatible

" Terminal features

if has("nvim")
	" Neovim 0.2.1: disable cursor styling using DEC sequences,
	" as it is not properly reset on exit. (Note that this must
	" go before 'set title')
	set guicursor=
endif

set title
set titlelen=0
set titlestring=%t%(\ %m%)%(\ (%{hostname()}\ %{expand(\"%:p:~:h\")})%)%(\ %a%)

if &term =~ "^screen"
	" Deal with Screen's inability to recognize \e]; as \e]0;
	set t_ts=]2; t_fs=
endif

set mouse=a

if &term =~ "^xterm"
	" The default 'xterm' mode is limited to 223 columns, and Windows
	" Terminal oddly has a much lower 93-col limit for it.
	"
	" 'sgr' seems to be the explicitly recommended mode; it works in PuTTY
	" and Windows Terminal, and has no such limit.
	"
	" Vim tries to autodetect sgr-capable terminals, but WT does not (yet)
	" respond to \e[>c version query.
	"
	" Neovim always uses sgr and does not have ttymouse= option.
	" (todo: why is this not in a !nvim guard, then?)
	set ttymouse=sgr
endif

" Syntax highlighting

let perl_no_extended_vars=1
let python_no_builtin_highlight=1

filetype plugin on
filetype indent off

augroup filetypedetect
	" Override Arch's ftdetect/PKGBUILD.vim. (This must be run after
	" pathogen, and before 'syntax on'.)
	au! BufNewFile,BufRead PKGBUILD
augroup END

syntax on
syntax sync minlines=200

" Color scheme

if has("termguicolors")
	" Vim 8, Neovim: Use RGB colors if possible.
	" <https://gist.github.com/XVilka/8346728>
	if &term =~ "^putty"
		" PuTTY does not support : as separator yet
		let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
		let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
	endif

	" Terminals known to support RGB
	" (disabled because Zenburn truecolor feels a bit off)
	"if &term =~ "-direct$" || &term =~ "^\\(tmux\\|putty\\|xterm\\)-256color"
	"	set termguicolors
	"endif
endif

if &term == "linux"
	set bg=dark
endif

let g:lucius_style="light"
"let g:lucius_style="dark"
let g:molokai_original=1
"let g:Powerline_symbols="fancy"
let g:zenburn_disable_bold_CursorBars=1
let g:zenburn_high_Contrast=1
let g:zenburn_old_Visual=1
let g:zenburn_italic_Comment=1
let g:zenburn_subdued_LineNr=1

if has("gui_running")
	" configured in gvimrc
elseif &t_Co >= 256
	" modern terminals
	if hostname() == "fujitsu" || $BRIGHT == "1"
		let g:lucius_style="light"
		color lucius
	else
		color zenburn
	endif
else
	" Fallback for obsolete terminals
	silent! color slate
endif

" UI elements

set ruler
set showmode
set showcmd

" Neovim 0.3 defaults to 'inccommand=split' to show a live preview of s///,
" disable it for now.
set inccommand=

set linebreak			" soft word-wrap
set display+=lastline		" show partial line if it doesn't fit
"set showbreak=â†µ\ 		" prefix wrapped lines
set display+=uhex		" show unprintable chars as <hex>
silent! set listchars=eol:Â¬,tab:â†’.,extends:Â»,precedes:Â«,trail:â€¢

silent! set number
silent! set numberwidth=4
set scrolloff=3			" scroll context lines
set laststatus=2		" always display status line
set splitbelow splitright
set tabpagemax=20		" increase max tab pages

if &t_Co > 16
	setl cursorline
	au WinEnter * setl cursorline
	au WinLeave * setl nocursorline
	au FocusGained * setl cursorline
	au FocusLost * setl nocursorline
endif

set wildmenu			" show menu when tab-completing :commands
"set wildmode=list:longest
silent! set wildignorecase

set noerrorbells visualbell t_vb=	" turn off all bells

set shortmess+=I		" do not show :intro message
"set shortmess+=A		" do not warn about existing swapfiles

""" File input/output

let g:netrw_http_cmd="curl -s -L"
let g:netrw_http_xcmd="-o"
let g:netrw_silent=1

set encoding=utf-8
set fileencodings=ucs-bom,utf-8,cp1257,latin1
set modeline

set backupcopy=yes		" fixes issues with vipw
set autoread
set hidden			" do not unload abandoned buffers

if has("nvim")
	" Treat AFS/NFS paths as 'removable' and don't store them in shada
	set shada+=r/afs/,r/n/,r/net/
endif

if !has("nvim")
	set viminfo+=n~/.vim/_viminfo
endif

" Swap file location â€“ use // to include full path in swapnames
if has("unix")
	if has("nvim")
		set backupdir-=.
		set undofile
	else
		set directory=~/.vim/_backup//
		set backupdir=~/.vim/_backup//
		silent! set undodir=~/.vim/_undo//
		silent! set undofile
	endif
endif

""" Text editing

" tabs
set tabstop=8
"set softtabstop=4
"set shiftwidth=8
set smarttab copyindent preserveindent
set autoindent
set smartindent
"set nocindent
set cinkeys=0{,0},0),:,!,o,O,e

" Don't smartindent after keywords like 'for', 'do' etc.
" (This retains smartindent after '{'.)
set cinwords=

" Note: To determine what re-enabled these options, use:
"       :verbose set sw? et? si? cin?

" allow backspacing over everything
set backspace=indent,eol,start
" t,c: auto-wrap text, comments according to textwidth
" r,o: insert comment leader after Return, o/O
" q: allow gq to format comments
" n: detect numbered lists
" j: remove comment leader when joining
set formatoptions=tcrqnj
" don't recognize S-lang comment leaders, X11 crazy stuff
set comments-=:%
set comments-=:XCOMM

set noshowmatch
"silent! let loaded_matchparen=1

" Searching

set incsearch
set ignorecase	    " enable //i by default
set smartcase	    " ignorecase unless upper-case was used
set gdefault	    " enable s///g by default

""" Keyboard and custom commands

com! -complete=file -bang -nargs=? W :w<bang> <args>

nnoremap ; :
nnoremap K <nop>
nnoremap q :q
nnoremap Q gq

" stop smartindent from auto-unindenting when # is input
inoremap # X#

" navigate visible lines, not physical lines
nnoremap k gk
nnoremap j gj
nnoremap <Up> gk
nnoremap <Down> gj
inoremap <C-Up> <Esc>gka
inoremap <C-Down> <Esc>gja

" paste without yanking old text
"vnoremap p "0p
"vnoremap P "0P

" jump between parens
nnoremap <Tab> %
vnoremap <Tab> %

if has("nvim") || has("terminal")
	tnoremap <Esc> <C-\><C-n>
	" other shortcuts:
	" Vim 8.1 - http://vimhelp.appspot.com/terminal.txt.html
endif

" list buffers
nnoremap <Leader>b :ls<CR>:b<Space>
" remove search highlight
nnoremap <Leader>h :nohlsearch<CR>
" rename word under cursor
nnoremap <Leader>rw :%s/\<<C-r><C-w>\>/
" toggle spell checking
nnoremap <Leader>s :set spell!<CR>
" sort CSS properties
nnoremap <Leader>S ?{<CR>jV/^\s*\}?$<CR>k:sort<CR>:noh<CR>
" display NERDtree
nnoremap <Leader>t :NERDTreeToggle<CR>
" display Tagbar
nnoremap <Leader>T :TagbarToggle<CR>
" reselect pasted text
nnoremap <Leader>v `[V`]
" rewrap current paragraph
nnoremap <Leader>w gq}
" strip trailing whitespace
nnoremap <Leader>W :%s/\s\+$//<CR>:let @/=""<CR>

" fix application-numpad mode
if !has("nvim")
	" (Vim 8.1) with Num Lock off, Num5 is parsed as individual commands
	map! <Esc>OE <Nop>
endif

" fix application-numpad mode in PuTTY
if !has("nvim") && $TERM =~ "^xterm"
"	set iminsert=1
"
	map <Esc>Ol +
	map <Esc>On .
	map <Esc>Op 0
	map <Esc>Oq 1
	map <Esc>Or 2
	map <Esc>Os 3
	map <Esc>Ot 4
	map <Esc>Ou 5
	map <Esc>Ov 6
	map <Esc>Ow 7
	map <Esc>Ox 8
	map <Esc>Oy 9
	map <Esc>OQ /
	map <Esc>OR *
	map <Esc>OS -
	map <Esc>Ol +
	map <Esc>On .

	map! <Esc>Op 0
	map! <Esc>Oq 1
	map! <Esc>Or 2
	map! <Esc>Os 3
	map! <Esc>Ot 4
	map! <Esc>Ou 5
	map! <Esc>Ov 6
	map! <Esc>Ow 7
	map! <Esc>Ox 8
	map! <Esc>Oy 9
	map! <Esc>OQ /
	map! <Esc>OR *
	map! <Esc>OS -
	map! <Esc>Ol +
	map! <Esc>On .

"	lmap <Esc>Ol +
"	lmap <Esc>On .
"	lmap <Esc>Op 0
"	lmap <Esc>Oq 1
"	lmap <Esc>Or 2
"	lmap <Esc>Os 3
"	lmap <Esc>Ot 4
"	lmap <Esc>Ou 5
"	lmap <Esc>Ov 6
"	lmap <Esc>Ow 7
"	lmap <Esc>Ox 8
"	lmap <Esc>Oy 9
"	lmap <Esc>OQ /
"	lmap <Esc>OR *
"	lmap <Esc>OS -
endif

set nottimeout		" disable timeout for key codes (enabled by defaults.vim)

""" File-specific behavior

if has("autocmd")
	au BufNewFile,BufRead COMMIT_EDITMSG,git-rebase-todo
	\ setl nomodeline

	au BufNewFile,BufRead /etc/motd
	\ setl et

	au BufNewFile,BufRead authorized_keys,~/.ssh/authorized_keys*,known_hosts,id_*.pub
	\ setl ft=conf wrap nolinebreak

	au! BufNewFile */_posts/2*.html
	\ 0r %:h/_template.html

	if has("nvim")
		" Neovim 0.2.1: terminal buffers now have line numbers
		au! TermOpen * setl nonumber norelativenumber
	endif
endif

""" Plugins

func! JoinPara()
	:g/^\S/ .,/^$/-1 join
endfunc

if hostname() == "rain"
	" Speed up neovim startup (~0.3 s) by not loading Python scripting.
	let g:loaded_python_provider = 0
	let g:loaded_python3_provider = 0
	let g:loaded_pythonx_provider = 0
endif
