#!/usr/bin/env bash

have() { command -v "$1" >&/dev/null; }

trash() {
	local trashdir=~/tmp file

	for file in "$@"; do
		if [ -k "$file" ]; then
			trace "ignoring sticky $file"
		elif [ -e "$file" ] || [ -h "$file" ]; then
			echo "backing up $file -> $trashdir"
			mkdir -pm 0700 "$trashdir"
			mv "$file" "$trashdir/old_${file##*/}"
		fi
	done
}

link() {
	local target=$dotdir/${1%/}
	local link=${2:-$HOME/.$1}

	if [ ! -e "$target" ]; then
		err "link target is missing: $link -> $target"
		return
	elif [ -e "$link" ]; then
		if [ -k "$link" ]; then
			trace "ignoring sticky $link"
			return
		elif [ -h "$link" ]; then
			rm -f "$link"
		else
			trash "$link"
		fi
	else
		local linkdir=${link%/*}
		if [ ! -d "$linkdir" ]; then
			mkdir -p "$linkdir"
		fi
	fi
	trace "linking $link -> $target"
	sym -f "$target" "$link"
}

check_owner() {
	local f
	for f in "$@"; do
		if [ -h "$f" ]; then
			continue
		elif [ -e "$f" ] && [ ! -O "$f" ]; then
			case $f in
			*/.mysql_history)
				continue ;;
			*/.lesshst)
				rm -f "$f" ;;
			*)
				notice "file '$f' not owned by me, replacing"
				trash "$f" ;;
			esac
			(umask 077; touch "$f")
		elif [ -d "$f" ] && [ ! -O "$f" ]; then
			notice "dir '$f' not owned by me, replacing"
			trash "$f"
			(umask 077; mkdir "$f")
		fi
	done
}

umask 077
export PATH="$HOME/bin:$HOME/code/bin:$PATH"

. lib.bash || exit

update=false
foreign=false

while getopts ":uv" OPT; do
	case $OPT in
	u) update=true;;
	v) VERBOSE=1;;
	*) lib::die_getopts;;
	esac
done; shift $((OPTIND-1))

if [[ -t 0 ]]; then
	VERBOSE=1
fi

dotdir="$(dirname "$(sym -R "$0")")"
trashdir=~/tmp

cd "$dotdir" || exit

# TODO: In update mode, only adjust existing links, do not create new ones.
if $update; then
	ssh/generate
	exit 0
fi

# Remove undesired files
trash ~/.{login,logout}
trash ~/.bash_{login,profile,logout}
trash ~/.{sh,csh}rc

# Ensure permissions for config directories
mkdir -p ~/.{config,cache,local/share}
chmod go= ~/.{config,cache,local,local/share}

# Check frequent root-ownership accidents
check_owner ~/.*_history ~/.lesshst ~/.rnd ~/.cache ~/.config ~/.gnupg ~/.local/share

# Install shell profiles
link bashrc
link inputrc
link profile

# OpenSSH
ssh/generate
link ssh/known_hosts

# Git
link git ~/.config/git
touch ~/.config/git/credentials

# Tig
mkdir -p ~/.local/share/tig
touch ~/.local/share/tig/history

# lftp
link lftprc ~/.config/lftp/rc

# msmtp
chmod 600 msmtprc
link msmtprc ~/.config/msmtp/config

# tmux (XDG paths are supported starting with tmux 3.1)
link tmux.conf ~/.config/tmux/tmux.conf

# vim & NeoVim
link vim ~/.vim
link vim ~/.config/nvim
link micro ~/.config/micro
rm -f ~/.viminfo
mkdir -p ~/.local/share/nvim/{backup,shada,swap,undo}
chmod go= ~/.local/share/nvim
chmod go= ~/.config/micro

# Mutt & NeoMutt
if have mutt || have neomutt; then
	if [ ! -e ~/.config/mutt/muttrc ]; then
		xdotdir=${dotdir/#"$HOME/"/"~/"}
		mkdir -p ~/.config/mutt
		echo "source \"$xdotdir/muttrc\"" > ~/.config/mutt/muttrc
		echo "source \"$xdotdir/muttrc.sh|\"" >> ~/.config/mutt/muttrc
	fi
	if [ ! -e ~/.config/neomutt ]; then
		ln -nsf mutt ~/.config/neomutt
	fi
fi

# Install GUI configs
if [ "$DISPLAY" ]; then
	# Systemd --user environment.d(5) generator
	# (see also systemd-environment-d-generator(8))
	link environ-desktop ~/.config/environment.d/20-desktop.conf

	if [ ! -d ~/.config/fontconfig ]; then
		link fontconfig ~/.config/fontconfig
	fi

	link XCompose ~/.XCompose
fi

if [ -e environ-$HOSTNAME ]; then
	link environ-$HOSTNAME ~/.config/environment.d/80-host.conf
fi

exit 0
