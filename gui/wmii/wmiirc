#!/usr/bin/env bash

NAMESPACE=$(wmiir namespace) || exit 1

RC_PATH=$(readlink -f "$0")

: ${WMII_CONFPATH:=${0%/*}}
WMII_CONFDIR=${WMII_CONFPATH%%:*}

### Configuration

# Bar/border colors (text, background, border)
WMII_NORMCOLORS="#888888 #222222 #333333"
WMII_FOCUSCOLORS="#ffffff #285577 #4c7899"
WMII_URGENTCOLORS="#ffffff #772828 #99784c"
WMII_BACKGROUND="#333333"
WMII_FONT="xft:Monaco:size=10"
WMII_TERM="roxterm"

Mod="Mod4"
Battery=""
StatusMpd=0

[[ -f "$WMII_CONFDIR/config" ]] &&
	. "$WMII_CONFDIR/config"

### Functions

# startup()		run startup/autorun programs (terminals and such)
# spawn(args)		launch a program in its own session
# log(str)		write line to stdout and debug.log
# bar(n, m)		display a gauge
# |htmlescape()		convert special HTML characters to HTML entities

startup() {
	#witray -s 24 &			echo "++ witray[$!]"
	statusloop &			echo "++ statusloop[$!]"
	statusloop_mpd &		echo "++ statusloop_mpd[$!]"
	statusloop_vol &		echo "++ statusloop_vol[$!]"

	if xprop -root WMII_STARTUP_DONE | grep -qs "= \"1\""; then
		log "startup script was already ran"
	else
		log "running startup script"
		if [[ -f "$WMII_CONFDIR/startup" ]]; then
			. "$WMII_CONFDIR/startup"
		fi
		xprop -root -format WMII_STARTUP_DONE 8s -set WMII_STARTUP_DONE 1
	fi
}

spawn() {
	log "launching: $*"
	(cd ~
	exec wmiir setsid -f "$@" </dev/null >&/dev/null)
}


log() {
	echo -e "wmiirc[$$]: $*"
	echo -e "\033[34m($$)\033[m $*" >> "$XDG_RUNTIME_DIR/wmii.log"
}

bar() {
	#ar_chars=▮▯
	#ar_chars=▰▱
	#ar_chars=■□
	#ar_chars=◾◽
	bar_chars='# '

	local value=$1 max=$2
	local bar='' len=0
	while (( i++ < value )); do
		bar+=${bar_chars:0:1}
	done
	while (( i++ <= max )); do
		bar+=${bar_chars:1:1}
	done
	echo "$bar"
}

htmlescape() {
	sed 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g; s/"/\&quot;/g'
}

# tags()		list all tags
# this_tag()		return current tag
# next_tag()		return next tag (wrap around to first)
# prev_tag()		return previous tag (wrap around)
# kill_tag(tag)	kill all clients in a tag

tags() {
	wmiir ls /tag | sed 's|/$||; /^sel$/d'
}

this_tag() {
	wmiir read /tag/sel/ctl | sed '1q'
}

next_tag() {
	tags | strtool nextw "$(this_tag)"
}

prev_tag() {
	tags | strtool prevw "$(this_tag)"
}

kill_tag() {
	local tag=$1
	wmiir read "/tag/$tag/index" |
	awk '!/^#/ {print $2}' | while read client; do
		local tags=$(wmiir read "/client/$client/tags")
		if [[ "$tags" == "$tag" ]]
			then wmiir xwrite "/client/$client/ctl" "kill"
			else wmiir xwrite "/client/$client/ctl" "tags -$tag"
		fi
	done
	if [[ $tag == "$(this_tag)" ]]; then
		wmiir xwrite "/ctl" "view $(next_tag)"
	fi
}

# this_client()		return currently selected client ID
# client_pid(client)	return PID of client (if known; exit 1 otherwise)

this_client() {
	wmiir read /client/sel/ctl | sed '1q'
}

client_pid() {
	wmiir read "/client/$1/ctl" | awk '$1 == "pid" {print $2; exit} END {exit 1}'
}

# program_input()	display wimenu with programs
# action_input()		display wimenu with given actions
# tag_menu()		display wimenu with current tags
#
# program_cache()	rebuild program cache used by program_input()

tag_menu() {
	tags | wimenu -p "${1:-view tag}:"
}

program_input() {
	{
	local input=$(wimenu -h "$WMII_CONFDIR/history" -n 20 < "$NAMESPACE/programs.cache")
	if [[ $input ]]; then
		eval spawn "$input"
	fi
	} &
}

program_cache() {
	local IFS=':'
	wmiir proglist -- $PATH | sort > "$NAMESPACE/programs.cache"
}

action_input() {
	local actions=(
		"quit"
		"rc"
		"exec wmii"
		"exec"
		"rehash"
		"shutdown"
		"reboot"
		)

	{
	printf '%s\n' "${actions[@]}" | wimenu -p "action:" \
		| sed 's/^/Action /' | wmiir write /event
	} &
}

event_Action() {
	local action="$1"; shift
	case "$action" in
	ctl)
		wmiir xwrite /ctl "$*";;
	eval)
		eval "$*";;
	exec)
		wmiir xwrite /ctl "exec $*";;
	quit)
		wmiir xwrite /event "Suicide"
		wmiir xwrite /ctl "quit"
		;;
	rehash)
		program_cache &;;
	rc)
		restart_rc;;
	reboot)
		systemctl reboot;;
	shutdown)
		systemctl poweroff;;
	esac
}

wi_9menu() {
	local name=$1 args=${*:2}
	local vmenu="menu_$name[@]"
	local vlast="last_$name"
	local vdefault="default_$name"
	local choice=$( "menu_$name" "${@:2}" &&
			wmii9menu -i "${!vlast:-${!vdefault}}" -- "${!vmenu}")
	if [[ $choice ]]; then
		declare -g "$vlast=$choice"
		wmiir xwrite /event $name $args $choice
	fi
}

wi_client_menu() {
	wi_9menu ClientAction $*
}

wi_system_menu() {
	wi_9menu SystemAction
}

### Event handling

event() {
	local event=$1; shift

	if [[ $(type -t "event_$event") == function ]]; then
		"event_$event" "$@"
		return
	fi
}

# mainloop events

event_Start() {
	log "quitting: replaced by another wmiirc"
	suicide
}

event_Shutdown() {
	log "quitting: requested"
	suicide
}

# tag events

event_CreateTag() {
	local tag=$1
	{
	echo colors "$WMII_NORMCOLORS"
	echo label "$tag"
	} | wmiir create "/lbar/$tag"
}

event_DestroyTag() {
	local tag=$1
	wmiir remove "/lbar/$tag"
}

event_FocusTag() {
	local tag=$1
	{
	echo colors $WMII_FOCUSCOLORS
	echo label $tag
	} | wmiir write "/lbar/$tag"
}

event_UnfocusTag() {
	local tag=$1
	{
	echo colors $WMII_NORMCOLORS
	echo label $tag
	} | wmiir write "/lbar/$tag"
}

event_UrgentTag() {
	local from=$1 tag=$2
	{
	echo colors $WMII_URGENTCOLORS
	echo label $tag
	} | wmiir write "/lbar/$tag"
}

event_NotUrgentTag() {
	local from=$1 tag=$2
	if [[ $tag = "$(this_tag)" ]]; then
		event_FocusTag "$tag"
	else
		event_UnfocusTag "$tag"
	fi
}

# mouse events

event_LeftBarMouseDown() {
	local button=$1 tag=$2
	case $button in
		1) wmiir xwrite /ctl "view $tag";;
		2) ;;
		3) ;;
		4) wmiir xwrite /ctl "view $(prev_tag)";;
		5) wmiir xwrite /ctl "view $(next_tag)";;
	esac
}

event_LeftBarClick() {
	local button=$1 tag=$2
	case $button in
		#1) wmiir xwrite /ctl "view $tag";;
		2) kill_tag "$tag";;
	esac
}

event_LeftBarDND() {
	local button=$1 tag=$2
	wmiir xwrite /ctl "view $tag"
}

event_RightBarMouseDown() {
	local button=$1 item=$2
	case $item in
		mpc)
			case $button in
				3) wi_9menu MediaAction;;
			esac
			;;
		zz_clock)
			case $button in
				3) wi_system_menu;;
			esac
			;;
	esac
}

event_RightBarClick() {
	local button=$1 item=$2
	case $item in
		mpc)
			case $button in
				1) mpc -q toggle || spawn mpd;;
				2) ;;
				3) ;;
				4) mpc -q next;;
				5) mpc -q prev;;
			esac
			;;
		mpc-volume)
			case $button in
				1) mpc -q toggle || spawn mpd;;
				2) ;;
				3) ;;
				4) ponymix increase 5;;
				5) ponymix decrease 5;;
			esac > /dev/null
			;;
		*)
			case $button in
				2) spawn lock-screen;;
			esac
			;;
	esac
}

event_ClientMouseDown() {
	local client=$1 button=$2
	case $button in
		3) wi_client_menu "$client";;
	esac
}

event_ClientClick() {
	local client=$1 button=$2
	case $button in
		2) wmiir xwrite "/client/$client/ctl" "kill";;
	esac
}

# key events

bind_Key=(
	$Mod-{Return,KP_Enter,p,a}
	Mod1-F2
	$Mod-{h,j,k,l,space}
	$Mod-Control-{j,k}
	$Mod-{0..9}
	$Mod-{t,Tab,grave}
	$Mod-{d,Shift-d,s,m}
	$Mod-Shift-{h,j,k,l,space,t}
	$Mod-Shift-{0..9}
	$Mod-{f,q}
	)

event_Key() {
	local keystroke=$1
	local key=${keystroke##*-}

	case $keystroke in
	$Mod-Return)
		spawn $WMII_TERM;;
	$Mod-KP_Enter)
		spawn $WMII_TERM;;
	$Mod-p)
		program_input;;
	$Mod-a)
		action_input;;
	Mod1-F2)
		program_input;;

	# focus movement

	$Mod-h)
		wmiir xwrite /tag/sel/ctl "select left";;
	$Mod-j)
		wmiir xwrite /tag/sel/ctl "select down";;
	$Mod-k)
		wmiir xwrite /tag/sel/ctl "select up";;
	$Mod-l)
		wmiir xwrite /tag/sel/ctl "select right";;
	$Mod-space)
		wmiir xwrite /tag/sel/ctl "select toggle";;

	$Mod-Control-j)
		wmiir xwrite /tag/sel/ctl "select down stack";;
	$Mod-Control-k)
		wmiir xwrite /tag/sel/ctl "select up stack";;

	# tag navigation

	$Mod-[0-9])
		local tag=$key
		wmiir xwrite /ctl "view $tag";;
	$Mod-t)
		local input=$(tag_menu)
		if [[ $input ]]; then
			wmiir xwrite /ctl "view $input"
		fi;;

	$Mod-Tab)
		wmiir xwrite /ctl "view $(next_tag)";;
	$Mod-grave)
		wmiir xwrite /ctl "view $(prev_tag)";;

	# column modes

	$Mod-d)
		wmiir xwrite /tag/sel/ctl "colmode sel default-max";;
	$Mod-Shift-d)
		wmiir xwrite /tag/sel/ctl "colmode sel default+max";;
	$Mod-s)
		wmiir xwrite /tag/sel/ctl "colmode sel stack-max";;
	$Mod-m)
		wmiir xwrite /tag/sel/ctl "colmode sel stack+max";;

	# window movement

	$Mod-Shift-h)
		wmiir xwrite /tag/sel/ctl "send sel left";;
	$Mod-Shift-j)
		wmiir xwrite /tag/sel/ctl "send sel down";;
	$Mod-Shift-k)
		wmiir xwrite /tag/sel/ctl "send sel up";;
	$Mod-Shift-l)
		wmiir xwrite /tag/sel/ctl "send sel right";;
	$Mod-Shift-space)
		wmiir xwrite /tag/sel/ctl "send sel toggle";;

	# window tag movement

	$Mod-Shift-[0-9])
		local tag=$key
		wmiir xwrite /client/sel/tags "$tag"
		wmiir xwrite /ctl "view $tag";;
	$Mod-Shift-t)
		local client=$(this_client)
		local input=$(tag_menu "retag client")
		if [[ $input ]]; then
			wmiir xwrite /client/$client/tags "$input"
		fi;;

	# window manipulation

	$Mod-f)
		wmiir xwrite /client/sel/ctl "fullscreen toggle";;
	$Mod-q)
		wmiir xwrite /client/sel/ctl "kill";;
	esac
}

# misc window events

event_Unresponsive() {
	local client=$1
	local msg=$(printf "The following client is not responding:\n\n%s\n\nWhat would you like to do?" \
				"$(wmiir read "/client/$client/label")")

	if ! wihack -transient "$client" zenity --question --text="$msg" \
		--ok-label="Wait" --cancel-label="Kill"
	then
		wmiir xwrite "/client/$client/ctl" "slay"
	fi &
}

# synthetic action events

menu_ClientAction() {
	local client=$1
	local float=$(wmiir read "/client/$client/ctl" | awk '$1 == "floating" {print $2; exit}')
	if [[ $float == 'on' ]]
		then float='unfloat'
		else float='float'
	fi
	menu_ClientAction=(
		"close"
		"kill"
		"info"
		"$float"
		"fullscreen"
		"retag")
}

event_ClientAction() {
	local client=$1 action=$2
	case $action in
	close)
		wmiir xwrite "/client/$client/ctl" "kill";;
	float|unfloat)
		wmiir xwrite "/tag/sel/ctl" "send $client toggle";;
	fullscreen)
		wmiir xwrite "/client/$client/ctl" "fullscreen on";;
	info)
		local pid=$(client_pid "$client")
		wmiir read "/client/$client/props" |
		{
			IFS=':' read winst wclass wlabel
			echo -e "Instance:\t$winst"
			echo -e "Class:\t$wclass"
			echo -e "Label:\t$wlabel"
			if [[ $pid ]]
				then echo -e "Process:\t($pid) $(ps -o 'cmd=' $pid)"
				else echo -e "Process:\tunknown"
			fi
			echo "Control:"
			wmiir read "/client/$client/ctl" | sed 's/^/\t/'
			echo "Properties:"
			wmiir read "/client/$client/props" | sed 's/^/\t/'
		} | wmiir setsid -f wihack -transient "$client" \
			zenity --text-info --title="Client $client"
		;;
	kill)
		local label=$(wmiir read "/client/$client/label" | htmlescape)
		local pid=$(client_pid "$client")
		local process= msg=
		if [[ $pid ]]
			then process="<b>$(ps -o 'cmd=' $pid | htmlescape)</b> (PID $pid)"
			else process="<i>unknown</i>"
		fi
		msg="Do you really want to disconnect the process that this window belongs to?"
		msg+="\n\nWindow:\t${client_label}\nProcess:\t${process}"
		(wihack -transient "$client" \
				zenity --question \
				--title="Disconnect process" \
				--text="$msg" \
				--ok-label="Cancel" --cancel-label="Disconnect" \
				|| wmiir xwrite "/client/$client/ctl" "slay") &
		;;
	retag)
		local label tags input
		label="$(wmiir read "/client/$client/label")"
		tags="$(wmiir read "/client/$client/tags")"
		(input=$(wihack -transient "$client" \
			zenity --entry --title="Retag" \
			--text="Enter new tags for window:\n$client_label" \
			--entry-text="$tags")
		if [[ "$input" ]]; then
			wmiir xwrite "/client/$client/tags" "${input// /+}"
		fi) &
		;;
	esac
}

menu_MediaAction() {
	local play=$(mpc | sed -rn 's/^\[([[:alpha:]]+)\].*/\1/p')

	if [[ $play == "playing" ]]; then
		play='pause'
	else
		play='play'
	fi

	menu_MediaAction=(
		"sonata"
		"prev"
		"next"
		"$play"
	)
	default_MediaAction="$play"
}

event_MediaAction() {
	local action=$1
	case $action in
		"play"|"pause"|"next"|"prev")
			mpc -q $action;;
		"sonata")
			spawn sonata;;
	esac
}

menu_SystemAction() {
	menu_SystemAction=(
		"shutdown"
		"reboot"
		"noop"
	)
	default_SystemAction="noop"
}

event_SystemAction() {
	local action=$1
	case $action in
		"shutdown")
			systemctl poweroff;;
		"reboot")
			systemctl reboot;;
	esac
}

# debug thing

event_Debug() {
	printf "\033[34m($$)\033[m Debug: \033[1m%s\033[m\n" "$*"
	local cmd=$1; shift
	case $cmd in
		"."|"poke")
			echo "Hello!";;
		"addrule")
			{ wmiir read /rules; echo "$*"; } | wmiir write /rules;;
		"ctl")
			wmiir xwrite /ctl "$@";;
		"eval")
			eval "$@";;
		"env"|"export"|"setenv")
			local env=$*
			if [[ $env == ?*=?* ]]; then
				export "$env"
			else
				unset "${env%=}"
			fi;;
		"ps")
			wmiir setsid ps -f -o pgid,pid,comm,command -$pgrp;;
		"r"|"read")
			wmiir read "$@";;
		"qr")
			wmiir xwrite /event "Shutdown";;
		"qw")
			wmiir xwrite /ctl "quit";;
		"re"|"restart")
			restart_rc;;
		"rw")
			restart_wmii;;
		"x"|"ixp"|"wmiir")
			wmiir "$@";;
		"w"|"write")
			wmiir xwrite "$@";;
		"?"|"help")
			cat <<-!
				Commands:
				.   poke
				c   ctl <ctl command>
				e   eval <shell code>
				p   ps
				qr  quit wmiirc
				qw  quit wmii
				r   read <path>
				re  restart only rc
				rw  restart wmii
				w   write <path> <data>
				x   ixpc (wmiir)
			!
			;;
		*)
			echo -e "\e[1;33mUnknown debug command '$cmd'. Try 'help'\e[m";;
	esac
} >> "$XDG_RUNTIME_DIR/wmii.log" 2>&1

## Loops for statusbar updating. Called from startup()
# statusloop()			updates clock and load average
# statusloop_mpd()		updates mpd playback status
# status_load()			prints load average from /proc/loadavg
# status_clock()		prints date/time
# status_mpd()			prints mpd status

statusloop() {
	printf "StatusLoop" > /proc/self/comm
	while true; do
		if [[ $Battery ]]; then
			status_battery
		fi
		{
			read a b c _ </proc/loadavg
			echo colors "$WMII_NORMCOLORS"
			echo label "$a $b $c"
		} | wmiir create '/rbar/zl_load'
		{
			echo colors "$WMII_NORMCOLORS"
			echo label "$(date '+%a, %b %d %H:%M')"
		} | wmiir create '/rbar/zz_clock'
		sleep 2
	done
}

statusloop_mpd() {
	(( StatusMpd )) || return

	printf "StatusMpd" > /proc/self/comm
	while true; do
		status_mpd
		mpc idle >&/dev/null || sleep 5
	done
}

statusloop_vol() {
	printf "StatusPulse" > /proc/self/comm
	status_volume
	stdbuf -o0 pactl subscribe | while read -r line; do
		if [[ $line == *change*on*sink* ]]; then
			status_volume
		fi
	done
}

#LAYING=''
PLAYING='♫'
#LAYING='▸'

#AUSED='(paused)'
#AUSED='▷'
#AUSED='▹'
PAUSED=''

status_mpd() {
	local FG_PLAYING='#bbbbbb'
	local FG_PAUSED=${WMII_NORMCOLORS%% *}
	local FG_STOPPED='#666666'
	local BG=${WMII_NORMCOLORS#* }

	{
		if ! mpc >&/dev/null; then
			echo colors "$FG_STOPPED $BG"
			echo label "(mpd not running)"
		elif mpc | grep -qs '^\[playing\]'; then
			echo colors "$FG_PLAYING $BG"
			echo label $PLAYING "$(mpc current)"
		elif mpc | grep -qs '^\[paused\]'; then
			echo colors "$FG_PAUSED $BG"
			echo label $PAUSED "$(mpc current)"
		else
			echo colors "$FG_STOPPED $BG"
			echo label "(stopped)"
		fi
	} | wmiir create "/rbar/mpc"
}

status_volume() {
	local FG=${WMII_NORMCOLORS%% *}
	local BG=${WMII_NORMCOLORS#* }

	local volume=$(ponymix get-volume)
	local text='volume'
	local max=11
	local cur=$((volume * max / 100))
	local bar=$(bar $cur $max)

	if ponymix is-muted; then
		bar=${bar//[! ]/·}
	fi

	{
		if (( cur >= 9 )); then
			echo colors "#ff3333 $BG"
		elif (( cur >= 8 )); then
			echo colors "#ddbb44 $BG"
		elif (( cur >= 7 )); then
			echo colors "#ffdd88 $BG"
		elif (( cur >= 6 )); then
			echo colors "#ffffff $BG"
		elif (( cur >= 5 )); then
			echo colors "#bbbbbb $BG"
		else
			echo colors "$FG $BG"
		fi
		echo label "$text [$bar]"
	} | wmiir create "/rbar/mpc-volume"
}

status_battery() {
	local FG=${WMII_NORMCOLORS%% *}
	local BG=${WMII_NORMCOLORS#* }
	local UFG=${WMII_URGENTCOLORS%% *}
	local UBG=${WMII_URGENTCOLORS#* }

	local level=$(</sys/class/power_supply/$Battery/capacity)
	local status=$(</sys/class/power_supply/$Battery/status)

	if [[ ${status,,} == "not charging" ]]; then
		if (( level < 100 )); then
			FG=$UFG BG=$UBG
		else
			status="charged"
		fi
	fi

	case ${status,,} in
		discharging)	local text="battery $level%";;
		charging)	local text="charging $level%";;
		*)		local text="${status,,} $level%";;
	esac

	local cur=$((level / 10))
	local bar=$(bar $cur 10)

	{
		if (( level >= 80 )); then
			echo colors "$FG $BG"
		elif (( level >= 65 )); then
			echo colors "#bbbbbb $BG"
		elif (( level >= 50 )); then
			echo colors "#ffffff $BG"
		elif (( level >= 35 )); then
			echo colors "#ddbb44 $BG"
		elif (( level >= 20 )); then
			echo colors "#ffdd88 $BG"
		elif (( level >= 10 )); then
			echo colors "#ff3333 $BG"
		else
			echo colors "$UFG $UBG"
		fi
		echo label "$text [$bar]"
	} | wmiir create "/rbar/zx_battery"
}

## wmiirc control functions
# suicide()			kill own pgroup; handler for SIGINT/TERM/QUIT
# restart_rc()			tell wmii to spawn a new wmiirc
# restart_wmii()		tell wmii to re-exec self

suicide() {
	local pgrp=$(proctool getpgid)
	log "\e[1;31mexiting:\e[m killing pgroup $pgrp"
	trap - EXIT
	trap 'exit' SIGINT SIGQUIT SIGTERM
	kill 0
	kill -9 0
}

restart_rc() {
	log "\e[33mrestarting wmiirc\e[m ($RC_PATH)"
	wmiir xwrite /ctl "spawn \"$RC_PATH\""
}

restart_wmii() {
	log "\e[33mrestarting wmii\e[m"
	wmiir xwrite /ctl "exec wmii"
}

### Start wmiirc

unset SHLVL

trap 'suicide' SIGINT SIGQUIT SIGTERM EXIT

pgrp=$(proctool getpgid)

log "\e[1;32mstarted:\e[m $0 (pgid=$pgrp)"

wmiir xwrite /event "Start $0"

wmiir write /ctl <<-!
	bar on top
	border 3
	font $WMII_FONT
	fontpad ${WMII_FONTPAD:-0 0 0 0}
	focuscolors $WMII_FOCUSCOLORS
	normcolors $WMII_NORMCOLORS
	grabmod $Mod
!

xsetroot -solid "$WMII_BACKGROUND"

# Set group=0 to make new gnome-terminal windows open in the active tag, rather
# than sticking to the client's previous tag.
wmiir write '/rules' <<!
	/^sonata:/ floating=on
	/^gnome-terminal-server:/ group=0
!

wmiir write '/colrules' <<-!
	/.*/ -> 62+38 # Golden Ratio
!

{
	[[ -f "$WMII_CONFDIR/rules" ]] &&
		wmiir write /rules <"$WMII_CONFDIR/rules"

	[[ -f "$WMII_CONFDIR/colrules" ]] &&
		wmiir write /colrules <"$WMII_CONFDIR/colrules"

	printf '%s\n' "${bind_Key[@]}" | wmiir write /keys

	wmiir ls -p /lbar /rbar | xargs -r wmiir rm

	current=$(this_tag)
	tags | while read -r tag; do
		if [[ "$tag" = "$current" ]]; then
			echo colors "$WMII_FOCUSCOLORS"
			echo label "$tag"
		else
			echo colors "$WMII_NORMCOLORS"
			echo label "$tag"
		fi | wmiir create "/lbar/$tag"
	done

	wmiir create '/rbar/!' </dev/null

	program_cache &

	startup
} &

printf 'EventLoop' >/proc/self/comm

while read event; do
	event $event
done < <(exec wmiir read /event)

log "EventLoop finished"

# cleanup of child processes done by EXIT trap
